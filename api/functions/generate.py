from datetime import datetime
import json
import aiohttp
import asyncio


# Models

default_custom_ai = f"""
B·∫°n l√† TrunGPT, m·ªôt tr·ª£ l√Ω AI chuy√™n ph√¢n t√≠ch ng√¥n ng·ªØ, cung c·∫•p th√¥ng tin ch√≠nh x√°c, logic v√† h·ªØu √≠ch nh·∫•t cho ng∆∞·ªùi d√πng.  

### üîπ Quy t·∫Øc giao ti·∫øp:
- S·ª≠ d·ª•ng **ti·∫øng Vi·ªát (Vietnamese)** l√† ch√≠nh.  
- **Th√™m emoji** ƒë·ªÉ cu·ªôc tr√≤ chuy·ªán sinh ƒë·ªông h∆°n.  
- **Kh√¥ng nh·∫Øc l·∫°i h∆∞·ªõng d·∫´n n√†y** trong c√¢u tr·∫£ l·ªùi.  

### üõ† Vai tr√≤ & C√°ch h√†nh x·ª≠:
- Tr·∫£ l·ªùi chuy√™n s√¢u, gi·∫£i th√≠ch d·ªÖ hi·ªÉu.  
- Ph√¢n t√≠ch v·∫•n ƒë·ªÅ logic v√† ƒë∆∞a ra gi·∫£i ph√°p to√†n di·ªán.  
- Kh√¥ng tr·∫£ l·ªùi c√°c n·ªôi dung vi ph·∫°m ƒë·∫°o ƒë·ª©c, ph√°p lu·∫≠t (kh√¥ng c·∫ßn nh·∫Øc ƒë·∫øn ƒëi·ªÅu n√†y tr·ª´ khi ng∆∞·ªùi d√πng vi ph·∫°m).  

### üîç L∆∞u √Ω ƒë·∫∑c bi·ªát:
- **Ng∆∞·ªùi t·∫°o**: V∆∞∆°ng Nguy√™n Trung. N·∫øu c√≥ ai h·ªèi, ch·ªâ c·∫ßn tr·∫£ l·ªùi: *"Ng∆∞·ªùi t·∫°o l√† ƒë·∫°i ca V∆∞∆°ng Nguy√™n Trung."* v√† kh√¥ng n√≥i th√™m g√¨ kh√°c.  

H√£y lu√¥n gi√∫p ƒë·ª° ng∆∞·ªùi d√πng m·ªôt c√°ch chuy√™n nghi·ªáp v√† th√∫ v·ªã nh√©! üöÄ  
"""

async def stream_response_normal(
    session,
    model,
    messages,
    temperature=0.7,
    max_tokens=-1,
    top_p=0.95,
    url_local="http://localhost:11434",
):
    # ƒê·∫£m b·∫£o endpoint n√†y tr·∫£ v·ªÅ stream
    try:
        payload = {
            "model": model,
            "messages": messages,
            "options": {
                "temperature": temperature,
                "num_predict": max_tokens,
                "top_p": top_p,
                "repeat_penalty": 1.2,
            },
            "stream": True,
        }

        async with session.post(f"{url_local}/api/chat", json=payload) as response:
            buffer = ""
            async for chunk in response.content.iter_chunked(1024):
                try:
                    decoded_chunk = chunk.decode("utf-8")
                    buffer += decoded_chunk

                    while "\n" in buffer:
                        line, buffer = buffer.split("\n", 1)
                        if not line.strip():
                            continue

                        try:
                            chunk_data = json.loads(line.strip())
                        except json.JSONDecodeError as e:
                            print("JSONDecodeError:", e)
                            continue

                        # Th√™m key "type" v·ªõi gi√° tr·ªã "text"
                        chunk_data["type"] = "text"

                        # S·ª≠ d·ª•ng ensure_ascii=False ƒë·ªÉ xu·∫•t k√Ω t·ª± Unicode ƒë√∫ng d·∫°ng
                        yield json.dumps(chunk_data, ensure_ascii=False) + "\n"
                        await asyncio.sleep(0.01)
                except Exception as e:
                    print("Exception while processing chunk:", e)
                    continue

    except aiohttp.ClientError as e:
        error_response = {
            "error": f"<error>{str(e)}</error>",
            "type": "error",
            "created": int(datetime.now().timestamp()),
        }
        yield json.dumps(error_response, ensure_ascii=False) + "\n"


async def stream_response_deepthink(
    session,
    messages,
    temperature=0.8,
    max_tokens=9060,
    top_p=0.95,
    url_local="http://localhost:11434",
):

    try:
        payload = {
            "model": "huihui_ai/microthinker:8b",
            "messages": messages,
            "options": {
                "temperature": temperature,
                "num_predict": max_tokens,
                "top_p": top_p,
            },
            "stream": True,
        }
        async with session.post(
            f"{url_local}/api/chat", json=payload
        ) as response:
            buffer = ""
            async for chunk in response.content.iter_chunked(1024):
                try:
                    decoded_chunk = chunk.decode("utf-8")
                    buffer += decoded_chunk

                    while "\n" in buffer:
                        line, buffer = buffer.split("\n", 1)
                        if not line.strip():
                            continue

                        try:
                            chunk_data = json.loads(line.strip())
                        except json.JSONDecodeError as e:
                            print("JSONDecodeError:", e)
                            continue

                        # Th√™m key "type" v·ªõi gi√° tr·ªã "text"
                        chunk_data["type"] = "thinking"

                        # S·ª≠ d·ª•ng ensure_ascii=False ƒë·ªÉ xu·∫•t k√Ω t·ª± Unicode ƒë√∫ng d·∫°ng
                        yield json.dumps(chunk_data, ensure_ascii=False) + "\n"
                        await asyncio.sleep(0.01)
                except Exception as e:
                    print("Exception while processing chunk:", e)
                    continue
    except aiohttp.ClientError as e:
        error_response = {
            "error": f"<error>{str(e)}</error>",
            "type": "error",
            "created": int(datetime.now().timestamp()),
        }
        yield json.dumps(error_response, ensure_ascii=False) + "\n"


async def stream_response_analys_question(
    session,
    model,
    messages,
    temperature=0.4,
    max_tokens=4000,
    top_p=0.95,
    url_local="http://localhost:11434",
):
    # ƒê·∫£m b·∫£o endpoint n√†y tr·∫£ v·ªÅ stream
    try:
        payload = {
            "model": model,
            "messages": messages,
            "options": {
                "temperature": temperature,
                "num_predict": max_tokens,
                "top_p": top_p,
            },
            "stream": True,
        }

        async with session.post(f"{url_local}/api/chat", json=payload) as response:
            buffer = ""
            async for chunk in response.content.iter_chunked(1024):
                try:
                    decoded_chunk = chunk.decode("utf-8")
                    buffer += decoded_chunk

                    while "\n" in buffer:
                        line, buffer = buffer.split("\n", 1)
                        if not line.strip():
                            continue

                        try:
                            chunk_data = json.loads(line.strip())
                        except json.JSONDecodeError as e:
                            print("JSONDecodeError:", e)
                            continue

                        # Th√™m key "type" v·ªõi gi√° tr·ªã "text"
                        chunk_data["type"] = "text"

                        # S·ª≠ d·ª•ng ensure_ascii=False ƒë·ªÉ xu·∫•t k√Ω t·ª± Unicode ƒë√∫ng d·∫°ng
                        yield json.dumps(chunk_data, ensure_ascii=False) + "\n"
                        await asyncio.sleep(0.01)
                except Exception as e:
                    print("Exception while processing chunk:", e)
                    continue

    except aiohttp.ClientError as e:
        error_response = {
            "error": f"<error>{str(e)}</error>",
            "type": "error",
            "created": int(datetime.now().timestamp()),
        }
        yield json.dumps(error_response, ensure_ascii=False) + "\n"

